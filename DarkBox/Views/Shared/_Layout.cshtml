@{
    var users = ViewBag.Users as List<User>;
    var projetos = ViewBag.Projetos as List<ProjectRequest>;
}
<!DOCTYPE html>
<html lang="pt">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - DarkBox</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <style>
        body {
            display: flex;
            flex-direction: column;
            height: 100vh;
            background: #2a2d35;
            color: white;
            margin: 0;
        }

        /* Estilização do Chat */
        #chatContainer {
            position: fixed;
            bottom: 20px;
            right: 20px;
            width: 300px;
            border-radius: 10px;
            background: #1e1e1e;
            color: white;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.3);
            font-family: Arial, sans-serif;
            overflow: hidden;
        }

        #chatHeader {
            background: #007bff;
            color: white;
            padding: 10px;
            text-align: center;
            cursor: pointer;
            font-weight: bold;
            border-radius: 10px 10px 0 0;
        }

        #chatBox {
            display: none;
            padding: 10px;
        }

        #messages {
            height: 250px;
            overflow-y: auto;
            border-bottom: 1px solid #444;
            padding: 10px;
            margin-bottom: 10px;
            background: #2a2d35;
            border-radius: 5px;
        }

        .message {
            padding: 8px;
            margin: 5px 0;
            border-radius: 5px;
            max-width: 80%;
            word-wrap: break-word;
        }

        .sent {
            background: #007bff;
            color: white;
            align-self: flex-end;
            text-align: right;
        }

        .received {
            background: #444;
            align-self: flex-start;
        }

        input, button {
            width: 100%;
            padding: 8px;
            margin-top: 5px;
            border: none;
            border-radius: 5px;
        }

        input {
            background: #333;
            color: white;
        }

        button {
            background: #007bff;
            color: white;
            cursor: pointer;
        }

            button:hover {
                background: #0056b3;
            }

        #userResults {
            max-height: 150px;
            overflow-y: auto;
            background: #2a2d35;
            border-radius: 5px;
            margin-top: 5px;
        }

        .user-item {
            padding: 8px;
            border-bottom: 1px solid #444;
            cursor: pointer;
        }

            .user-item:hover {
                background: #007bff;
            }

        /* Navbar fixa no topo */
        .navbar {
            background: #1c1f26;
            padding: 10px 15px;
        }

            .navbar .nav-link {
                color: white;
            }

        /* Sidebar fixa na esquerda */
        .sidebar {
            width: 250px;
            background: #1c1f26;
            padding: 20px;
            height: calc(100vh - 56px);
            position: fixed;
            top: 56px;
            left: 0;
            overflow-y: auto;
        }

            .sidebar a {
                color: white;
                text-decoration: none;
                display: block;
                padding: 10px;
                border-radius: 5px;
            }

                .sidebar a:hover {
                    background: #2a2d35;
                }

        /* Ajustando o conteúdo principal */
        .content {
            margin-left: 250px;
            padding: 20px;
            flex-grow: 1;
            overflow-y: auto;
        }

        /* Badge de notificações */
        .badge {
            font-size: 0.8em;
            vertical-align: top;
        }

        /* Estilizando os cards dos projetos */
        .projetos-container {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
        }

        .card {
            background: #333;
            border: none;
            padding: 10px;
            width: 100%;
            max-width: 230px;
        }

        .card-title {
            font-size: 1rem;
            font-weight: bold;
        }

        .card-text {
            font-size: 0.875rem;
            color: #ccc;
        }
    </style>
</head>
<body>

    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="@Url.Action("ClienteDashboard", "DashBoard")">
                <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor" class="bi bi-box mb-1" viewBox="0 0 16 16">
                    <path d="M8.186 1.113a.5.5 0 0 0-.372 0L1.846 3.5 8 5.961 14.154 3.5zM15 4.239l-6.5 2.6v7.922l6.5-2.6V4.24zM7.5 14.762V6.838L1 4.239v7.923zM7.443.184a1.5 1.5 0 0 1 1.114 0l7.129 2.852A.5.5 0 0 1 16 3.5v8.662a1 1 0 0 1-.629.928l-7.185 2.874a.5.5 0 0 1-.372 0L.63 13.09a1 1 0 0 1-.63-.928V3.5a.5.5 0 0 1 .314-.464z" />
                </svg>
                DarkBox
            </a>

            <!-- Adicione a barra de pesquisa na navbar -->
            <form action="@Url.Action("Search", "Search")" method="GET" class="d-flex">
                <input id="searchInput" name="query" class="form-control me-2" type="search" placeholder="Pesquisar utilizadores ou projetos..." aria-label="Search" required>
                <button class="btn btn-outline-light" type="submit">🔍</button>
            </form>

            <div class="ms-3">
                <ul class="navbar-nav">
                    <!-- Ícone de Notificações -->
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle position-relative" href="#" id="notificationDropdown" role="button" data-bs-toggle="dropdown">
                            🔔
                            <span id="notificationBadge" class="badge bg-danger position-absolute top-0 start-100 translate-middle rounded-pill" style="display:none;">0</span>
                        </a>
                        <ul class="dropdown-menu dropdown-menu-end" id="notificationList">
                            <li><a class="dropdown-item text-muted">Nenhuma notificação</a></li>
                        </ul>
                    </li>
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" id="pedidosDropdown" role="button" data-bs-toggle="dropdown">Pedidos</a>
                        <ul class="dropdown-menu dropdown">
                            <li><a class="dropdown-item" asp-action="NovoPedido" asp-controller="ProjectRequest">Fazer Pedido</a></li>
                            <li><a class="dropdown-item" asp-action="MeusPedidos" asp-controller="ProjectRequest">Os meus pedidos</a></li>
                            @if (User.IsInRole("developer"))
                            {
                                <li>
                                    <a class="dropdown-item" asp-controller="ProjectRequest" asp-action="Pendentes">
                                        📂 Projetos Pendentes
                                    </a>
                                </li>
                            }
                        </ul>
                    </li>
                    <!-- Perfil do Usuário -->
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" id="perfilDropdown" role="button" data-bs-toggle="dropdown">
                            👤 @(User?.Identity?.Name ?? "Usuário")
                        </a>
                        <ul class="dropdown-menu dropdown-menu-end">
                            <li><a class="dropdown-item" href="#">O seu perfil</a></li>
                            <li><a class="dropdown-item" href="#">Os seus projetos</a></li>
                            <li><a class="dropdown-item" href="#">O seu armazenamento</a></li>
                            <li><hr class="dropdown-divider"></li>
                            <li><a class="dropdown-item" href="#">Assinatura</a></li>
                            <li><a class="dropdown-item" href="#">Tema</a></li>
                            <li><a class="dropdown-item text-danger" href="@Url.Action("Logout", "Login")">Sair</a></li>
                        </ul>
                    </li>
                    <!-- Botão do Chat -->
                    <li class="nav-item">
                        <a class="nav-link" href="#" id="chatButton" onclick="toggleChat()">💬 Chat</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <div class="d-flex">
        <!-- Sidebar -->
        <div class="sidebar">
            <h5 class="mt-4">📁 Os seus Projetos</h5>
            @if (projetos != null && projetos.Count > 0)
            {
                <div class="projetos-container">
                    @foreach (var projeto in Model.Projetos)
                    {
                        <div class="card text-white shadow-sm">
                            <div class="card-body d-flex flex-column">
                                <h5 class="card-title">@projeto.Title</h5>
                                <p class="card-text text-truncate" title="@projeto.Description">@projeto.Description</p>
                                <div class="mt-auto">
                                    <a href="@Url.Action("Detalhes", "Projetos", new { id = projeto.ProjectId })" class="btn btn-dark btn-sm w-100">
                                        📂 Ver detalhes
                                    </a>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="alert alert-dark text-center" role="alert">
                    <p class="mb-2">Você ainda não tem projetos.</p>
                    <a href="@Url.Action("CriarProjeto", "Projetos")" class="btn btn-primary btn-sm">➕ Criar Novo Projeto</a>
                </div>
            }
        </div>

        <!-- Conteúdo da View -->
        <div class="content">
            @RenderBody()
        </div>
    </div>

    <!-- Chat Container -->
    <div id="chatContainer" style="position: fixed; bottom: 20px; right: 20px; display: none;">
        <div id="chatHeader" onclick="toggleChat()">💬 Chat</div>
        <div id="chatBox">
            <input type="text" id="userSearch" placeholder="Pesquisar usuário..." oninput="searchUsers()" />
            <div id="userResults"></div> <!-- Aqui vão aparecer os resultados da pesquisa -->
            <div id="messages"></div>
            <input type="text" id="messageInput" placeholder="Escreve a tua mensagem..." />
            <button onclick="sendMessage()">Enviar</button>
        </div>
    </div>

    <!-- Script para remover a última linha separadora -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        function search() {
            let query = document.getElementById("searchInput").value.trim();
            if (query.length < 2) return;

            fetch(`/api/search?query=${query}`)
                .then(response => response.json())
                .then(data => {
                    let resultsContainer = document.getElementById("searchResults");
                    resultsContainer.innerHTML = "";

                    if (data.users.length === 0 && data.projects.length === 0) {
                        resultsContainer.innerHTML = "<p>Nenhum resultado encontrado.</p>";
                        return;
                    }

                    data.users.forEach(user => {
                        let userItem = `<p>👤 <a href='/user/${user.id}'>${user.userName}</a></p>`;
                        resultsContainer.innerHTML += userItem;
                    });

                    data.projects.forEach(project => {
                        let projectItem = `<p>📂 <a href='/project/${project.id}'>${project.name}</a></p>`;
                        resultsContainer.innerHTML += projectItem;
                    });
                });
        }

        const connection = new signalR.HubConnectionBuilder()
                .withUrl("/chatHub")
                .build();

            let selectedUserId = null;

            // Conectar ao SignalR
            connection.start()
                .then(() => console.log("Conectado ao SignalR!"))
                .catch(err => console.error("Erro ao conectar:", err));

            // Pesquisar usuários em tempo real
            function searchUsers() {
                let searchTerm = document.getElementById("userSearch").value;
                if (searchTerm.length < 1) {
                    document.getElementById("userResults").innerHTML = "";
                    return;
                }

                connection.invoke("SearchUsers", searchTerm).catch(err => console.error(err.toString()));
            }

            // Atualizar lista de usuários pesquisados
            connection.on("ReceiveUserResults", function (users) {
                let resultsDiv = document.getElementById("userResults");
                resultsDiv.innerHTML = "";
                users.forEach(user => {
                    let userElement = document.createElement("div");
                    userElement.textContent = user.username;
                    userElement.classList.add("user-item");
                    userElement.onclick = () => selectUser(user.userId, user.username);
                    resultsDiv.appendChild(userElement);
                });
            });

            // Selecionar usuário para conversar
            function selectUser(userId, username) {
                selectedUserId = userId;
                document.getElementById("userSearch").value = username;
                document.getElementById("userResults").innerHTML = "";
            }

            // Enviar mensagem para o usuário selecionado
                    function sendMessage() {
                let message = document.getElementById("messageInput").value.trim();
                let sender = "@User.Identity.Name"; // Obtém o nome do usuário autenticado do Razor
                let projectId = null; // Defina o projectId se necessário

                if (!selectedUserId || message === "") {
                    alert("Escolha um usuário e escreva uma mensagem.");
                    return;
                }

                connection.invoke("SendMessage", sender, message, selectedUserId, projectId)
                    .then(() => {
                        document.getElementById("messageInput").value = "";
                        displayMessage(sender, message, "sent"); // Exibir mensagem enviada no chat
                    })
                    .catch(err => console.error("Erro ao enviar mensagem:", err));
            }


            // Exibir mensagens no chat
            function displayMessage(sender, message, type) {
                let messagesDiv = document.getElementById("messages");
                let messageElement = document.createElement("div");
                messageElement.textContent = sender + ": " + message;
                messageElement.classList.add("message", type);
                messagesDiv.appendChild(messageElement);
                messagesDiv.scrollTop = messagesDiv.scrollHeight; // Rolar para a última mensagem
            }

            // Receber mensagens
            connection.on("ReceiveMessage", function (sender, message) {
                displayMessage(sender, message, "received");
            });

            // Alternar visibilidade do chat
            function toggleChat() {
                let chatContainer = document.getElementById("chatContainer");
                chatContainer.style.display = chatContainer.style.display === "none" ? "block" : "none";
            }

    </script>
    @RenderSection("Scripts", required: false)
</body>
</html>
